以./xx.sh start 112 113为例


   $#------执行脚本时传递的参数个数（$#=3）

   $@------传递的参数（$@=start 112 113）

   $0-------脚本文件本身($0=./xx.sh)

   $1-------传递给脚本的第一个参数($1=start)

   $2-------传递给脚本的第一个参数($2=112)

   $3-------传递给脚本的第一个参数($3=113)

   $$-------当前进程的pid

   $()与``-------命令替换(command subsititution)

   $(())-------数学运算（arithmetical operation）

   ${}-------用做变量的替换（variable subsititution） 另外还有一些特异的功能，见附件； 

history用法：参见man 3 history

   !!-------上一次命令

   !^-------上一次命令的第一个参数

   !$-------上一次命令的最后一个参数

   !*-------上一次命令的全部参数

   !:0-------命令本身

   !:3-------指定第3个参数

   !:2-5-------指定2到5个参数

   !:-3-------指定0到3个参数

   !:2*-------指定2到最后一个参数

   !:2-  -------指定2到最后二个参数

   !:s/xx/yy  -------将上次命令中的xx替换为yy


附${}的特异功能

   ${}-------用做变量的替换（variable subsititution）

   ${}对数组的操作：

        A=(abc    def  ghij) $A被定义数组

        ${A[@]}与${A[*]}得到全部数组

                 例：for i in ${A[@]}; do echo $i; done;



        ${A[2]}得到全部数组的第2个组数

        ${#A[@]}与${#A[*]}得到数组的数量

        ${#A[2]}与${#A[2]}得到数组的第二个数组的长度即 def的长度

        A[3]=okaywangbin 对数组的第3个组数进行赋值

        ${#*}和${#@}将给出位置参数的个数.

        对于数组来说${#array[*]}和${$#array[@]}将给出数组元素的个数.

   ${}为字符串的操作

   假设我们定义了一个变量为：
   file=/dir1/dir2/dir3/my.file.txt
   我们可以用 ${ } 分别替换获得不同的值：

       ${file#*/}：拿掉第一条 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt
       ${file##*/}：拿掉最后一条 / 及其左边的字符串：my.file.txt
       ${file#*.}：拿掉第一个 .  及其左边的字符串：file.txt
       ${file##*.}：拿掉最后一个 .  及其左边的字符串：txt
       ${file%/*}：拿掉最后条 / 及其右边的字符串：/dir1/dir2/dir3
       ${file%%/*}：拿掉第一条 / 及其右边的字符串：(空值)
       ${file%.*}：拿掉最后一个 .  及其右边的字符串：/dir1/dir2/dir3/my.file
       ${file%%.*}：拿掉第一个 .  及其右边的字符串：/dir1/dir2/dir3/my

   记忆的方法为：

            [list]# 是去掉左边(在鉴盘上 # 在 $ 之左边)
            % 是去掉右边(在鉴盘上 % 在 $ 之右边)

   单一符号是最小匹配﹔两个符号是最大匹配。[/list]

           ${file:0:5}：提取最左边的 5 个字节：/dir1
           ${file:5:5}：提取第 5 个字节右边的连续 5 个字节：/dir2

 
   我们也可以对变量值里的字符串作替换：

           ${file/dir/path}：将第一个 dir 提换为 path：/path1/dir2/dir3/my.file.txt
           ${file//dir/path}：将全部 dir 提换为 path：/path1/path2/path3/my.file.txt


    利用 ${ } 还可针对不同的变量状态赋值(没设定、空值、非空值)： 

    ${file-my.file.txt} ：假如 $file 没有设定，则使用 my.file.txt 作传回值。(空值及非空值时不作处理) 
    ${file:-my.file.txt} ：假如 $file 没有设定或为空值，则使用 my.file.txt 作传回值。 (非空值时不作处理)
    ${file+my.file.txt} ：假如 $file 设为空值或非空值，均使用 my.file.txt 作传回值。(没设定时不作处理)
    ${file:+my.file.txt} ：若 $file 为非空值，则使用 my.file.txt 作传回值。 (没设定及空值时不作处理)
    ${file=my.file.txt} ：若 $file 没设定，则使用 my.file.txt 作传回值，同时将 $file 赋值为 my.file.txt 。 (空值及非空值时不作处理)
    ${file:=my.file.txt} ：若 $file 没设定或为空值，则使用 my.file.txt 作传回值，同时将 $file 赋值为 my.file.txt 。 (非空值时不作处理)
    ${file?my.file.txt} ：若 $file 没设定，则将 my.file.txt 输出至 STDERR。 (空值及非空值时不作处理)
    ${file:?my.file.txt} ：若 $file 没设定或为空值，则将 my.file.txt 输出至 STDERR。 (非空值时不作处理)


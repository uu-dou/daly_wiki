一、单引号和双引号
首先，单引号和双引号，都是为了解决中间有空格的问题。
linux中时作为一个很典型的分隔符，比如string1=this is astring，这样执行就会报错。为了避免这个问题，因此就产生了单引号和双引号。他们的区别在于，单引号将剥夺其中的所有字符的特殊含义，而双引号中的'$'（参数替换）和'`'（命令替换）是例外。所以，两者基本上没有什么区别，除非在内容中遇到了参数替换符$和命令替换符`。

所以下面的结果：
num=3
echo ‘$num’
$num
echo “$num”
3
所以，如果需要在双引号””里面使用这两种符号，需要用反斜杠转义。


二、反引号``
这个东西的用法，我百度了一下，和$()是一样的。在执行一条命令时，会先将其中的 ``，或者是$() 中的语句当作命令执行一遍，再将结果加入到原命令中重新执行，例如：
echo `ls`
会先执行 ls 得到xx.sh等，再替换原命令为：
echo xx.sh
最后执行结果为
xx.sh
那么，平时我们遇到的把一堆命令的执行结果输出到一个变量中，需要用这个命令替换符括起来，也就可以理解了。
这里又涉及到了一个问题，虽然不少系统工程师在使用替换功能时，喜欢使用反引号将命令括起来。但是根据POSIX规范，要求系统工程师采用的是$(命令)的形式。所以，我们最好还是遵循这个规范，少用``，多用$()


三、小括号，中括号，和大括号的区别

那么，下面又涉及到了一个问题，就是小括号，中括号，和大括号的区别。
先说说小括号和大括号的区别。这两者，实际上是“命令群组”的概念，也就是commandgroup。
( ) 把 command group 放在subshell去执行，也叫做 nested sub-shell。
{ } 则是在同一个 shell 内完成，也称为 non-namedcommand group。
所以说，如果在shell里面执行“函数”，需要用到{}，实际上也就是一个命令群组么。
不过，根据实测，test=$(ls -a)可以执行，但是test=${ls–a}语法上面是有错误的。估计也和上面所说的原因有关。

另外，从网上摘录的区别如下：
A,()只是对一串命令重新开一个子shell进行执行
B,{}对一串命令在当前shell执行
C,()和{}都是把一串的命令放在括号里面，并且命令之间用;号隔开
D,()最后一个命令可以不用分号
E,{}最后一个命令要用分号
F,{}的第一个命令和左括号之间必须要有一个空格
G,()里的各命令不必和括号有空格
H,()和{}中括号里面的某个命令的重定向只影响该命令，但括号外的重定向则影响到括号里的所有命令

两个括号(())，是代表算数扩展，就是对其包括的东西进行标准的算数计算——注意，不能算浮点数，如果需要算浮点数，需要用bc做。

至于中括号[]，感觉作用就是用来比较的。比如放在if语句里面，while语句里面，等等。
这里引出来[..]和[[…]]的区别：（摘自网上，实测证实）：使用[[... ]]条件判断结构, 而不是[ ... ], 能够防止脚本中的许多逻辑错误.比如,&&, ||, <,和> 操作符能够正常存在于[[ ]]条件判断结构中, 但是如果出现在[ ]结构中的话,会报错。
五、[](test)
[] 与test命令一样，用于比较值以及检查文件类型。如下：
1、[ "$A" = 123 ]：是字符串的测试，以测试 $A 是否为 1、2、3 这三个连续的"文字"。
2、[ "$A" -eq 123 ]：是整数的测试，以测试 $A 是否等于"一百二十三"。
3、[ -e "$A" ]：是关于文件的测试，以测试 123 这份"文件"是否存在。

六、[[]]
[[]]可以说是[]的“增强版”，它能够将多个test命令支持的测试组合起来，例如：

# [[ (-d "$HOME") && (-w "$HOME") ]] && echo echo "home is a writable directory" 

home is a writable directory

至于这两者的区别有位仁兄已经写的很清楚了，我将其整理一下：

数字测试： -eq -ne -lt -le -gt -ge，[[ ]]同 [ ]一致
文件测试： -r、-l、-w、-x、-f、-d、-s、-nt、-ot，[[ ]]同 [ ]一致
字符串测试： > < =(同==) != -n -z，不可使用“<=”和“>=”，[[ ]]同 [ ]一致，但在[]中，>和<必须使用\进行转义，即\>和\<
逻辑测试： []为 -a -o ! [[ ]] 为&& || !
数学运算： [] 不可以使用 [[ ]]可以使用+ - * / %
组合： 均可用各自逻辑符号连接的数字（运算）测试、文件测试、字符测试

拿这两者对字符串的测试举一个例子，如下：

# [ a \> 1 ] && echo ture || echo false
ture
# [[ a > 1 ]] && echo ture || echo false
ture

字符串的比较是根据相应的ASCII码来比较的，所以a>1是成立的。如果有兴趣也可以思考一下为什么会出现下面的结果？

# [[ a > 1 ]] && echo ture || echo false
ture

七、(())
(())专门来做数值运算，如果表达式求值为 0，则设置退出状态为 1；如果求值为非 0 值，则设置为 0。不需要对 (( 和 )) 之间的操作符转义。算术只对整数进行。除 0 会产生错误，但不会产生溢出。可以执行 C 语言中常见的算术、逻辑和位操作。如下：

# ((i=1+99));echo $i
100

也能：

# i=99;((i++));echo $i
100

除此之外，也可以使用$(())直接进行数值运算，如下：

# echo $((2**3))
8

注意：使用 (( )) 时，不需要空格分隔各值和运算符，使用[]和[[ ]] 时需要用空格分隔各值和运算符。 